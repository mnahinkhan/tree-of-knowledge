# Generated by Django 3.0.3 on 2020-08-09 17:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mastery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A name for this learning resource', max_length=20)),
                ('link', models.URLField(blank=True, help_text='A URL to help access this learning resource, if any')),
                ('description', models.TextField(help_text='A helpful description describing this learning resource')),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mastery_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A name for this field of knowledge', max_length=20)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields_created', to=settings.AUTH_USER_MODEL)),
                ('pre_req_fields', models.ManyToManyField(blank=True, help_text='Fields that are important to learn before tackling this field of knowledge', related_name='enabling_fields', to='knowledge.Field')),
                ('super_field', models.ForeignKey(blank=True, help_text='The broader field that this field of knowledge resides in', on_delete=django.db.models.deletion.CASCADE, related_name='sub_fields', to='knowledge.Field')),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variety', models.CharField(choices=[('paper', 'Academic Paper'), ('event', 'Historic Event')], help_text='What kind of a message is this?', max_length=5)),
                ('year', models.IntegerField(help_text='The year in which the event/paper occurred or was published')),
                ('title', models.CharField(help_text='Name of event/paper', max_length=20)),
                ('description', models.TextField(help_text='A helpful description for the event/paper. Personal takes are encouraged.')),
                ('reference', models.CharField(help_text='A reference to the event/paper, such as a URL', max_length=2048)),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversation_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
